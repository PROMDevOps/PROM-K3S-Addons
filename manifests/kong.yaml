---
# Source: helm-kong/charts/kong/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kong
  namespace: default
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.22.0
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "3.2"
---
# Source: helm-kong/templates/kong-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kong-config
data:
  kong.yml: |
    _format_version: "3.0"
    _transform: true

    services:
    - name: scb-service
      url: https://promrub-scb.prom.co.th/
      routes:
      - name: scb
        paths:
        - /scb

    - name: google-service
      url: https://google.com/
      routes:
      - name: google
        paths:
        - /google
---
# Source: helm-kong/charts/kong/templates/service-kong-admin.yaml
apiVersion: v1
kind: Service
metadata:
  name: kong-admin
  namespace: default
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.22.0
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "3.2"
spec:
  type: ClusterIP
  ports:
  - name: kong-admin
    port: 8001
    targetPort: 8001
    protocol: TCP
  - name: kong-admin-tls
    port: 8444
    targetPort: 8444
    protocol: TCP
  selector:
    app.kubernetes.io/name: kong
    app.kubernetes.io/component: app
    app.kubernetes.io/instance: "release-name"
---
# Source: helm-kong/charts/kong/templates/service-kong-proxy.yaml
apiVersion: v1
kind: Service
metadata:
  name: kong-proxy
  namespace: default
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.22.0
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "3.2"
    enable-metrics: "true"
spec:
  type: ClusterIP
  ports:
  - name: kong-proxy
    port: 80
    targetPort: 8000
    protocol: TCP
  - name: kong-proxy-tls
    port: 443
    targetPort: 8443
    protocol: TCP
  selector:
    app.kubernetes.io/name: kong
    app.kubernetes.io/component: app
    app.kubernetes.io/instance: "release-name"
---
# Source: helm-kong/charts/konga/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-konga
  labels:
    app.kubernetes.io/name: konga
    app.kubernetes.io/version: 0.0.0
    helm.sh/chart: konga-0.0.14
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  ports: 
    - name: http
      port: 80
      protocol: TCP
      targetPort: 1337
  selector:
    app.kubernetes.io/name: konga
    app.kubernetes.io/instance: release-name
    helm.sh/from: deploy.release-name-konga
---
# Source: helm-kong/charts/kong/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kong
  namespace:  default
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.22.0
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "3.2"
    app.kubernetes.io/component: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kong
      app.kubernetes.io/component: app
      app.kubernetes.io/instance: "release-name"

  template:
    metadata:
      annotations:
        kuma.io/service-account-token-volume: kong-token
        kuma.io/gateway: "enabled"
        traffic.sidecar.istio.io/includeInboundPorts: ""
      labels:
        app.kubernetes.io/name: kong
        helm.sh/chart: kong-2.22.0
        app.kubernetes.io/instance: "release-name"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/version: "3.2"
        app.kubernetes.io/component: app
        app: kong
        version: "3.2"
    spec:
      serviceAccountName: kong
      automountServiceAccountToken: false
      
      initContainers:
      - name: clear-stale-pid
        image: kong:3.2
        imagePullPolicy: IfNotPresent
        securityContext:
        
          readOnlyRootFilesystem: true
        resources:
          {}
        command:
        - "rm"
        - "-vrf"
        - "$KONG_PREFIX/pids"
        env:
         
        - name: DUMMY
          value: "001"
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001, 0.0.0.0:8444 http2 ssl"
        - name: KONG_CLUSTER_LISTEN
          value: "off"
        - name: KONG_DATABASE
          value: "off"
        - name: KONG_DECLARATIVE_CONFIG
          value: "/kong_dbless/kong.yml"
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PLUGINS
          value: "bundled"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PORT_MAPS
          value: "80:8000, 443:8443"
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, 0.0.0.0:8443 http2 ssl"
        - name: KONG_PROXY_STREAM_ACCESS_LOG
          value: "/dev/stdout basic"
        - name: KONG_PROXY_STREAM_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ROUTER_FLAVOR
          value: "traditional"
        - name: KONG_STATUS_ACCESS_LOG
          value: "off"
        - name: KONG_STATUS_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        volumeMounts:
        - name: kong-prefix-dir
          mountPath: /kong_prefix/
        - name: kong-tmp
          mountPath: /tmp
        - name: kong-custom-dbless-config-volume
          mountPath: /kong_dbless/
      containers:
      - name: "proxy"
        image: kong:3.2
        imagePullPolicy: IfNotPresent
        securityContext:
        
          readOnlyRootFilesystem: true
        env:
         
        - name: DUMMY
          value: "001"
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001, 0.0.0.0:8444 http2 ssl"
        - name: KONG_CLUSTER_LISTEN
          value: "off"
        - name: KONG_DATABASE
          value: "off"
        - name: KONG_DECLARATIVE_CONFIG
          value: "/kong_dbless/kong.yml"
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PLUGINS
          value: "bundled"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PORT_MAPS
          value: "80:8000, 443:8443"
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, 0.0.0.0:8443 http2 ssl"
        - name: KONG_PROXY_STREAM_ACCESS_LOG
          value: "/dev/stdout basic"
        - name: KONG_PROXY_STREAM_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ROUTER_FLAVOR
          value: "traditional"
        - name: KONG_STATUS_ACCESS_LOG
          value: "off"
        - name: KONG_STATUS_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        - name: KONG_NGINX_DAEMON
          value: "off"
        lifecycle:
          preStop:
            exec:
              command:
              - kong
              - quit
              - --wait=15
        ports:
        - name: admin
          containerPort: 8001
          protocol: TCP
        - name: admin-tls
          containerPort: 8444
          protocol: TCP
        - name: proxy
          containerPort: 8000
          protocol: TCP
        - name: proxy-tls
          containerPort: 8443
          protocol: TCP
        - name: status
          containerPort: 8100
          protocol: TCP
        volumeMounts:
          - name: kong-prefix-dir
            mountPath: /kong_prefix/
          - name: kong-tmp
            mountPath: /tmp
          - name: kong-custom-dbless-config-volume
            mountPath: /kong_dbless/
          
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /status
            port: status
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /status
            port: status
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          {} 
      securityContext:
        {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: kong-prefix-dir
          emptyDir:
            sizeLimit: 256Mi
        - name: kong-tmp
          emptyDir:
            sizeLimit: 1Gi
        - name: kong-custom-dbless-config-volume
          configMap:
            name: kong-config
        
        - name: kong-token
          projected:
            sources:
            - serviceAccountToken:
                expirationSeconds: 3607
                path: token
            - configMap:
                items:
                - key: ca.crt
                  path: ca.crt
                name: kube-root-ca.crt
            - downwardAPI:
                items:
                - fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
                  path: namespace
---
# Source: helm-kong/charts/konga/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-konga
  labels:
    app.kubernetes.io/name: konga
    app.kubernetes.io/version: 0.0.0
    helm.sh/chart: konga-0.0.14
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    
spec:
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: konga
      helm.sh/from: deploy.release-name-konga
  template:
    metadata:
      labels:
        app.kubernetes.io/name: konga
        app.kubernetes.io/version: 0.0.0
        helm.sh/chart: konga-0.0.14
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        helm.sh/from: deploy.release-name-konga
        
    spec:
      serviceAccountName: default
      dnsPolicy: ClusterFirst
      containers:
        - name: konga
          image: "pantsel/konga:latest"
          imagePullPolicy: IfNotPresent
          env: 
            - name: KONGA_SEED_USER_DATA_SOURCE_FILE
              value: /configs/konga-users.cfg
            - name: KONGA_SEED_KONG_NODE_DATA_SOURCE_FILE
              value: /configs/konga-nodes.cfg
          volumeMounts: 
            - mountPath: /configs
              name: config
          ports: 
            - containerPort: 1337
              name: http
              protocol: TCP
          resources: 
            {}

      affinity: 
      volumes: 
        - name: config
          secret:
            optional: false
            secretName: konga-credentials
---
# Source: helm-kong/templates/api-ing.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-ing
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTP  
    kubernetes.io/ingress.class: "nginx"
spec:
  tls:
    - hosts:
      - 
      secretName: api-cert
  rules:
    - host: 
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: kong-proxy
                port:
                  number: 80
---
# Source: helm-kong/templates/konga-ing.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kong-ing
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTP  
    kubernetes.io/ingress.class: "nginx"
spec:
  tls:
    - hosts:
      - 
      secretName: kong-cert
  rules:
    - host: 
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: kong--konga
                port:
                  number: 80
---
# Source: helm-kong/templates/api-cert.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: api-cert
spec:
  secretName: api-cert
  dnsNames:
    - 
  issuerRef:
    name: lets-encrypt-issuer-prod
    kind: ClusterIssuer
    group: cert-manager.io
---
# Source: helm-kong/templates/konga-cert.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: kong-cert
spec:
  secretName: kong-cert
  dnsNames:
    - 
  issuerRef:
    name: lets-encrypt-issuer-prod
    kind: ClusterIssuer
    group: cert-manager.io
---
# Source: helm-kong/templates/konga-secret.yaml
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: konga-credentials
spec:
  refreshInterval: 1m
  secretStoreRef:
    kind: ClusterSecretStore
    name: k8s-secret-store      # name of the SecretStore (or kind specified)
  target:
    name: konga-credentials       # name of the k8s Secret to be created
  data:
  - secretKey: konga-nodes.cfg
    remoteRef:
      key: initial-secret
      property: KONGA_NODES_CONFIG

  - secretKey: konga-users.cfg
    remoteRef:
      key: initial-secret
      property: KONGA_USERS_CONFIG
